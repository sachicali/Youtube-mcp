/**
 * YouTube API and Application-Specific Types
 * 
 * These types define the structure for YouTube API responses,
 * internal data models, and business logic interfaces.
 */

// YouTube API Response Types (from YouTube Data API v3)
export interface YouTubeVideoResponse {
  kind: 'youtube#video';
  etag: string;
  id: string;
  snippet: {
    publishedAt: string;
    channelId: string;
    title: string;
    description: string;
    thumbnails: {
      default?: YouTubeThumbnail;
      medium?: YouTubeThumbnail;
      high?: YouTubeThumbnail;
      standard?: YouTubeThumbnail;
      maxres?: YouTubeThumbnail;
    };
    channelTitle: string;
    tags?: string[];
    categoryId: string;
    liveBroadcastContent: 'none' | 'upcoming' | 'live';
    defaultLanguage?: string;
    defaultAudioLanguage?: string;
  };
  status?: {
    uploadStatus: 'deleted' | 'failed' | 'processed' | 'rejected' | 'uploaded';
    privacyStatus: 'private' | 'public' | 'unlisted';
    license: 'youtube' | 'creativeCommon';
    embeddable: boolean;
    publicStatsViewable: boolean;
  };
  statistics?: {
    viewCount: string;
    likeCount: string;
    dislikeCount?: string;
    favoriteCount: string;
    commentCount: string;
  };
  contentDetails?: {
    duration: string;
    dimension: '2d' | '3d';
    definition: 'hd' | 'sd';
    caption: 'false' | 'true';
    licensedContent: boolean;
    projection: 'rectangular' | '360';
  };
}

export interface YouTubeThumbnail {
  url: string;
  width: number;
  height: number;
}

export interface YouTubeChannelResponse {
  kind: 'youtube#channel';
  etag: string;
  id: string;
  snippet: {
    title: string;
    description: string;
    customUrl?: string;
    publishedAt: string;
    thumbnails: {
      default?: YouTubeThumbnail;
      medium?: YouTubeThumbnail;
      high?: YouTubeThumbnail;
    };
    country?: string;
  };
  statistics?: {
    viewCount: string;
    subscriberCount: string;
    hiddenSubscriberCount: boolean;
    videoCount: string;
  };
  contentDetails?: {
    relatedPlaylists: {
      likes?: string;
      favorites?: string;
      uploads?: string;
      watchHistory?: string;
      watchLater?: string;
    };
  };
}

export interface YouTubeSearchResponse {
  kind: 'youtube#searchListResponse';
  etag: string;
  nextPageToken?: string;
  prevPageToken?: string;
  regionCode?: string;
  pageInfo: {
    totalResults: number;
    resultsPerPage: number;
  };
  items: YouTubeSearchResult[];
}

export interface YouTubeSearchResult {
  kind: 'youtube#searchResult';
  etag: string;
  id: {
    kind: 'youtube#video' | 'youtube#channel' | 'youtube#playlist';
    videoId?: string;
    channelId?: string;
    playlistId?: string;
  };
  snippet: {
    publishedAt: string;
    channelId: string;
    title: string;
    description: string;
    thumbnails: {
      default?: YouTubeThumbnail;
      medium?: YouTubeThumbnail;
      high?: YouTubeThumbnail;
    };
    channelTitle: string;
    liveBroadcastContent: 'none' | 'upcoming' | 'live';
  };
}

// Application-Specific Types
export interface VideoMetrics {
  viewCount: number;
  likeCount: number;
  commentCount: number;
  favoriteCount: number;
  dislikeCount?: number;
  publishedAt: string;
  duration: string;
  engagement: {
    likeRatio: number;
    commentRatio: number;
    engagementScore: number;
  };
}

export interface VideoInfo {
  videoId: string;
  title: string;
  description: string;
  channelId: string;
  channelTitle: string;
  metrics: VideoMetrics;
  tags: string[];
  categoryId: string;
  thumbnails: {
    default?: string;
    medium?: string;
    high?: string;
  };
  contentDetails: {
    duration: string;
    definition: 'hd' | 'sd';
    caption: boolean;
    licensedContent: boolean;
  };
  status: {
    privacyStatus: 'private' | 'public' | 'unlisted';
    embeddable: boolean;
    publicStatsViewable: boolean;
  };
}

export interface TranscriptSegment {
  text: string;
  start: number;
  duration: number;
  end: number;
}

export interface VideoTranscript {
  videoId: string;
  language: string;
  isAutoGenerated: boolean;
  segments: TranscriptSegment[];
  fullText: string;
  wordCount: number;
  estimatedReadingTime: number; // in minutes
}

export interface ChannelInfo {
  channelId: string;
  title: string;
  description: string;
  customUrl?: string;
  publishedAt: string;
  country?: string;
  thumbnails: {
    default?: string;
    medium?: string;
    high?: string;
  };
  statistics: {
    viewCount: number;
    subscriberCount: number;
    videoCount: number;
    hiddenSubscriberCount: boolean;
  };
}

export interface ChannelAnalysis {
  channel: ChannelInfo;
  videos: VideoInfo[];
  summary: {
    totalVideos: number;
    averageViews: number;
    averageLikes: number;
    averageComments: number;
    averageEngagement: number;
    topCategories: string[];
    commonTags: string[];
  };
  topPerformer: {
    video: VideoInfo;
    reasons: string[];
    performanceScore: number;
    comparisonMetrics: {
      viewsVsAverage: number;
      likesVsAverage: number;
      commentsVsAverage: number;
      engagementVsAverage: number;
    };
  };
  trends: {
    viewTrends: TrendData[];
    engagementTrends: TrendData[];
    topicTrends: string[];
    performancePatterns: string[];
  };
}

export interface TrendData {
  period: string;
  value: number;
  change: number;
  changePercent: number;
}

export interface CompetitorComparison {
  mainChannel: ChannelAnalysis;
  competitors: ChannelAnalysis[];
  insights: {
    strengths: CompetitorInsight[];
    weaknesses: CompetitorInsight[];
    opportunities: CompetitorInsight[];
    threats: CompetitorInsight[];
    recommendations: string[];
  };
  benchmarks: {
    viewsPerVideo: CompetitorBenchmark;
    engagementRate: CompetitorBenchmark;
    uploadFrequency: CompetitorBenchmark;
    subscriberGrowth: CompetitorBenchmark;
  };
}

export interface CompetitorInsight {
  category: 'content' | 'engagement' | 'growth' | 'strategy';
  description: string;
  impact: 'high' | 'medium' | 'low';
  confidence: number; // 0-100
  evidence: string[];
}

export interface CompetitorBenchmark {
  mainChannel: number;
  competitorAverage: number;
  industryBenchmark?: number;
  ranking: number; // 1-based ranking among all channels
  percentile: number; // 0-100
}

export interface TrendAnalysis {
  query: string;
  timeframe: string;
  region: string;
  category?: string;
  trendingTopics: TrendingTopic[];
  keywordAnalysis: KeywordAnalysis[];
  relatedQueries: string[];
  insights: {
    emergingTopics: string[];
    decliningTopics: string[];
    seasonalPatterns: string[];
    recommendations: string[];
  };
}

export interface TrendingTopic {
  topic: string;
  relevanceScore: number; // 0-100
  trendScore: number; // 0-100
  growthRate: number; // percentage
  relatedKeywords: string[];
  videoCount: number;
  averageViews: number;
  competitionLevel: 'low' | 'medium' | 'high';
}

export interface KeywordAnalysis {
  keyword: string;
  searchVolume: number;
  competition: 'low' | 'medium' | 'high';
  relevance: number; // 0-100
  difficulty: number; // 0-100
  relatedKeywords: string[];
  contentGaps: string[];
}

export interface ContentSearchResult {
  query: string;
  channelId?: string;
  totalResults: number;
  videos: VideoSearchMatch[];
  insights: {
    topChannels: string[];
    commonTopics: string[];
    contentGaps: string[];
    recommendations: string[];
  };
}

export interface VideoSearchMatch {
  video: VideoInfo;
  transcript?: VideoTranscript;
  matchDetails: {
    matchCount: number;
    matchPercentage: number;
    keyMatches: TranscriptMatch[];
    relevanceScore: number;
  };
}

export interface TranscriptMatch {
  text: string;
  timestamp: number;
  context: string;
  confidence: number;
}

// API Integration Types
export interface YouTubeAPIConfig {
  apiKey: string;
  baseUrl: string;
  quotaLimit: number;
  requestsPerSecond: number;
}

export interface APIQuotaInfo {
  used: number;
  limit: number;
  remaining: number;
  resetTime: Date;
  costPerOperation: Record<string, number>;
}

export interface CacheConfig {
  transcripts: { ttl: number };
  videoMetrics: { ttl: number };
  channelAnalysis: { ttl: number };
  trends: { ttl: number };
  searches: { ttl: number };
}

// Error Types
export interface YouTubeAPIError {
  code: number;
  message: string;
  details?: {
    domain: string;
    reason: string;
    location?: string;
    locationType?: string;
  }[];
  status: string;
}

export interface TranscriptError {
  videoId: string;
  error: 'not_available' | 'language_not_supported' | 'private_video' | 'api_error';
  message: string;
  availableLanguages?: string[];
}

// Utility Types
export type VideoIdString = string; // 11 characters, e.g., "dQw4w9WgXcQ"
export type ChannelIdString = string; // 24 characters starting with "UC", e.g., "UCuAXFkgsw1L7xaCfnd5JJOw"
export type PlaylistIdString = string; // Variable length, e.g., "PLrAXtmRdnEQy6nuLMfaSJitwyCZvKQ4CP"

export type YouTubeEntityId = VideoIdString | ChannelIdString | PlaylistIdString;

export type SortOrder = 'date' | 'rating' | 'relevance' | 'title' | 'videoCount' | 'viewCount';
export type VideoDefinition = 'any' | 'high' | 'standard';
export type VideoDuration = 'any' | 'long' | 'medium' | 'short';
export type VideoLicense = 'any' | 'creativeCommon' | 'youtube';
export type SafeSearch = 'moderate' | 'none' | 'strict';

// Video Analytics Response Types
export interface VideoAnalytics {
  video: {
    id: string;
    title: string;
    description: string;
    publishedAt: string;
    duration: string;
    categoryId: string;
    defaultLanguage?: string;
    tags: string[];
  };
  statistics: {
    viewCount: number;
    likeCount: number;
    commentCount: number;
    favoriteCount: number;
    dislikeCount?: number;
  };
  channel?: {
    id: string;
    title: string;
    customUrl?: string;
    publishedAt: string;
    subscriberCount: number;
    videoCount: number;
    viewCount: number;
  };
  analytics?: {
    engagementRate: number;
    likeToViewRatio: number;
    commentToViewRatio: number;
    averageViewsPerDay: number;
    performanceCategory: 'viral' | 'high' | 'average' | 'low';
    daysFromUpload: number;
  };
  metadata: {
    retrievedAt: string;
    cached: boolean;
    quota_cost: number;
  };
}

// Enhanced channel information for analytics
export interface ChannelAnalyticsInfo {
  id: string;
  title: string;
  customUrl?: string;
  publishedAt: string;
  subscriberCount: number;
  videoCount: number;
  viewCount: number;
  description?: string;
  thumbnails?: {
    default?: string;
    medium?: string;
    high?: string;
  };
}

// Performance metrics for video analytics
export interface VideoPerformanceMetrics {
  engagementRate: number;
  likeToViewRatio: number;
  commentToViewRatio: number;
  averageViewsPerDay: number;
  performanceCategory: 'viral' | 'high' | 'average' | 'low';
  daysFromUpload: number;
  socialShareEstimate?: number;
  retentionRate?: number;
}