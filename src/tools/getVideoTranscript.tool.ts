/**
 * Get Video Transcript Tool
 * Extracts video transcripts with multi-language support and auto-generated fallbacks
 */

import type { MCPTool, MCPToolResponse, MCPContext } from '@/types/mcp.types';

export const getVideoTranscriptTool: MCPTool = {
  name: 'getVideoTranscript',
  description: 'Extract transcript from a YouTube video URL or video ID',
  inputSchema: {
    type: 'object',
    properties: {
      videoUrl: {
        type: 'string',
        description: 'YouTube video URL or direct video ID (supports youtube.com/watch, youtu.be, and direct video IDs)',
        minLength: 11,
      },
      language: {
        type: 'string',
        description: 'Preferred language code (optional, defaults to English)',
        default: 'en',
        pattern: '^[a-z]{2}(-[A-Z]{2})?$',
      },
    },
    required: ['videoUrl'],
    additionalProperties: false,
  },
  handler: async (input: unknown, context: MCPContext): Promise<MCPToolResponse> => {
    try {
      // Import services dynamically to avoid circular dependencies
      const { YouTubeService } = await import('@/services/youtube.service');
      const { ConfigurationService } = await import('@/services/configuration.service');
      const { LoggerUtil } = await import('@/utils/logger.util');
      
      // Validate input
      const validatedInput = input as { videoUrl: string; language?: string };
      
      // Get environment from context (this should be available in the execution context)
      const env = (context as any).env as import('@/types/environment.types').CloudflareEnvironment;
      if (!env) {
        throw new Error('Environment not available in execution context');
      }

      // Initialize services
      const config = new ConfigurationService(env);
      await config.initialize();
      
      const logger = new LoggerUtil(config.getConfiguration());
      const youtubeService = new YouTubeService(config, logger, env);

      // Extract transcript
      const transcript = await youtubeService.getVideoTranscript(
        validatedInput.videoUrl,
        validatedInput.language || 'en'
      );

      // Format response
      const response = {
        videoId: transcript.videoId,
        title: `Video transcript for ${transcript.videoId}`,
        language: transcript.language,
        isAutoGenerated: transcript.isAutoGenerated,
        transcript: {
          fullText: transcript.fullText,
          segments: transcript.segments,
          wordCount: transcript.wordCount,
          estimatedReadingTime: transcript.estimatedReadingTime
        }
      };

      return {
        content: [{
          type: 'text',
          text: JSON.stringify(response, null, 2),
        }],
        isError: false,
      };

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      
      return {
        content: [{
          type: 'text',
          text: `Error extracting transcript: ${errorMessage}`,
        }],
        isError: true,
      };
    }
  },
};