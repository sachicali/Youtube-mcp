# YouTube Scraping MCP Server - Environment Configuration
# Copy this file to .env and fill in your values

# ==============================================================================
# REQUIRED CONFIGURATION
# ==============================================================================

# YouTube Data API v3 Key (Required)
# Get this from Google Cloud Console > APIs & Services > Credentials
# Guide: https://developers.google.com/youtube/v3/getting-started
YOUTUBE_API_KEY=your_youtube_api_key_here

# Environment (Required)
# Options: development, staging, production
ENVIRONMENT=development

# ==============================================================================
# OPTIONAL CONFIGURATION
# ==============================================================================

# Debug Logging
# Enable detailed logging for development
# Options: true, false
DEBUG=false

# Rate Limiting Configuration
# Maximum requests per time window
RATE_LIMIT_REQUESTS=100

# Rate limit time window in milliseconds (default: 1 minute)
RATE_LIMIT_WINDOW=60000

# Cache Configuration
# Default cache TTL in seconds (default: 1 hour)
CACHE_DEFAULT_TTL=3600

# Video cache TTL in seconds (default: 24 hours)
CACHE_VIDEO_TTL=86400

# Channel cache TTL in seconds (default: 6 hours)  
CACHE_CHANNEL_TTL=21600

# ==============================================================================
# CLOUDFLARE WORKERS CONFIGURATION
# ==============================================================================

# These are automatically provided by Cloudflare Workers runtime
# Do not set these in production - they are for local development only

# KV Namespace binding names (matches wrangler.toml)
# YOUTUBE_MCP_KV=your_kv_namespace_id
# CACHE_KV=your_cache_namespace_id

# ==============================================================================
# REMOTE MCP SERVER CONFIGURATION
# ==============================================================================

# WebSocket Configuration
# Maximum concurrent connections per worker
WS_MAX_CONNECTIONS=1000

# WebSocket heartbeat interval in milliseconds
WS_HEARTBEAT_INTERVAL=30000

# WebSocket connection timeout in milliseconds
WS_CONNECTION_TIMEOUT=300000

# Authentication Configuration
# API key minimum length
AUTH_API_KEY_MIN_LENGTH=32

# Session timeout in milliseconds (default: 24 hours)
AUTH_SESSION_TIMEOUT=86400000

# Default quota per user per day (YouTube API units)
AUTH_DEFAULT_QUOTA=10000

# Quota warning threshold percentage
AUTH_QUOTA_WARNING_THRESHOLD=80

# ==============================================================================
# PERFORMANCE CONFIGURATION
# ==============================================================================

# Response time targets in milliseconds
PERFORMANCE_TARGET_CACHED=50
PERFORMANCE_TARGET_KV=200
PERFORMANCE_TARGET_API=500

# Batch request configuration
BATCH_MAX_VIDEOS=50
BATCH_MAX_CHANNELS=20

# Retry configuration
RETRY_MAX_ATTEMPTS=3
RETRY_INITIAL_DELAY=1000
RETRY_MAX_DELAY=10000

# ==============================================================================
# MONITORING CONFIGURATION
# ==============================================================================

# Health check configuration
HEALTH_CHECK_INTERVAL=300000

# Metrics retention in milliseconds (default: 24 hours)
METRICS_RETENTION=86400000

# Error tracking
ERROR_TRACKING_ENABLED=true
ERROR_RATE_THRESHOLD=5

# ==============================================================================
# DEVELOPMENT CONFIGURATION
# ==============================================================================

# Local development server port
DEV_PORT=8787

# Enable CORS for development
DEV_CORS_ENABLED=true

# Development origins for CORS
DEV_CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# Mock YouTube API responses for testing
DEV_MOCK_YOUTUBE_API=false

# ==============================================================================
# PRODUCTION OVERRIDES
# ==============================================================================

# Production-specific settings
# Uncomment and modify for production deployment

# ENVIRONMENT=production
# DEBUG=false
# RATE_LIMIT_REQUESTS=1000
# WS_MAX_CONNECTIONS=5000
# AUTH_DEFAULT_QUOTA=50000
# DEV_CORS_ENABLED=false

# ==============================================================================
# EXAMPLE VALUES FOR TESTING
# ==============================================================================

# For local development and testing, you can use these example values:

# YOUTUBE_API_KEY=AIzaSyBm8X1234567890abcdefghijklmnopqrs
# ENVIRONMENT=development
# DEBUG=true
# RATE_LIMIT_REQUESTS=50
# CACHE_DEFAULT_TTL=1800
# WS_HEARTBEAT_INTERVAL=15000
# AUTH_DEFAULT_QUOTA=5000

# ==============================================================================
# SECURITY NOTES
# ==============================================================================

# IMPORTANT SECURITY CONSIDERATIONS:
#
# 1. Never commit .env files to version control
# 2. Use different API keys for development and production
# 3. Regularly rotate API keys
# 4. Monitor API usage and quota consumption
# 5. Use least-privilege principles for API permissions
# 6. Enable rate limiting in production
# 7. Monitor error rates and unusual usage patterns
#
# For production deployment:
# - Set environment variables directly in Cloudflare Workers dashboard
# - Use Cloudflare Workers Secrets for sensitive values
# - Enable DDoS protection and firewall rules
# - Set up monitoring and alerting

# ==============================================================================
# GETTING STARTED
# ==============================================================================

# 1. Copy this file to .env:
#    cp .env.example .env
#
# 2. Get YouTube API key:
#    - Go to Google Cloud Console
#    - Create new project or select existing
#    - Enable YouTube Data API v3
#    - Create credentials (API key)
#    - Copy API key to YOUTUBE_API_KEY
#
# 3. Configure Cloudflare Workers:
#    - Install Wrangler CLI: npm install -g wrangler
#    - Login: wrangler login
#    - Create KV namespaces: wrangler kv:namespace create YOUTUBE_MCP_KV
#    - Update wrangler.toml with namespace IDs
#
# 4. Start development:
#    npm run dev
#
# 5. Test with MCP Inspector:
#    npx @modelcontextprotocol/inspector http://localhost:8787/mcp

# ==============================================================================
# TROUBLESHOOTING
# ==============================================================================

# Common issues and solutions:
#
# Issue: "Invalid API key" errors
# Solution: Check YOUTUBE_API_KEY is correct and API is enabled
#
# Issue: "Quota exceeded" errors  
# Solution: Check quota usage in Google Cloud Console, increase limits
#
# Issue: WebSocket connection failures
# Solution: Check WS_* configuration and firewall settings
#
# Issue: Cache not working
# Solution: Verify KV namespace configuration in wrangler.toml
#
# Issue: TypeScript compilation errors
# Solution: Run npm run build to check for type errors
#
# For more help, see docs/troubleshooting.md